ilCounties@data$n <- n_cty$n[match(ilCounties$NAME, n_cty$county)]
head(ilCounties@data)
colorQuantile("Greens", mapData()@data$n)
colorQuantile("Greens", ilCounties@data$n)
head(ilCounties@data$n)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)(900)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)(0.1)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)(1000)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)(1100)
summary(ilCounties@data$n)
colorQuantile(palette = "Greens", domain = ilCounties@data$n)(950)
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
head(mapData())
head(mapData()@data)
head(ilCounties@data)
n_cty$n[match(ilCounties$NAME, n_cty$county)]
ilCounties@data$n <- n_cty$n[match(ilCounties$NAME, n_cty$county)]
head(ilCounties@data)
n_cty <- subData()[, (n = .N), by = county]
ilCounties@data$n <- n_cty$n[match(ilCounties$NAME, n_cty$county)]
head(ilCounties@data)
n_cty <- subData()[, (n = .N), by = county]
ilCounties@data$n <- n_cty$n[match(ilCounties$NAME, n_cty$county)]
head(ilCounties@data)
n_cty
n_cty <- subData()[, .(n = .N), by = county]
ilCounties@data$n <- n_cty$n[match(ilCounties$NAME, n_cty$county)]
head(ilCounties@data)
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
ilCounties@data
ilCounties@data[order(ilCounties@data$NAME)]
ilCounties@data[order(ilCounties@data$NAME),]
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
lcaCharData <- dt[, prop.table(table(kids05)), by = lcaclass]
head(lcaCharData)
lcaCharData
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05)))
lcaCharData
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
lcaCharData
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(dt, aes(x = factor(lcaclass), colour = kids05)) +
geom_bar(position = "stacked") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
ggplot(lcaCharData, aes(x = factor(lcaclass), colour = kids05)) +
geom_bar(position = "stacked") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
ggplot(lcaCharData, aes(x = factor(lcaclass), colour = kids05)) +
geom_bar(position = "stacked") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class")
ggplot(lcaCharData, aes(x = factor(lcaclass), colour = kids05)) +
geom_bar(position = "stacked") +
xlab("LCA Class")
class(lcaCharData)
lcaCharData
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, colour = kids05)) +
geom_bar(stat = "identity", position = "stacked") +
xlab("LCA Class")
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, colour = kids05)) +
geom_bar(stat = "identity", position = "stacked") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, colour = kids05)) +
geom_bar(stat = "identity", position = "stacked")
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, colour = kids05)) +
geom_bar(stat = "identity")
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class")
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") +
scale_colour_discrete(name = "") +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") +
scale_colour_discrete(name = NULL) +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") +
scale_fill_discrete(name = NULL) +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05))) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") + ylab("%") +
scale_fill_discrete(name = NULL) +
scale_y_continuous(labels = percent) +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05), margin = 2)) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") + ylab("%") +
scale_fill_discrete(name = NULL) +
scale_y_continuous(labels = percent) +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
lcaCharData <- with(dt, prop.table(table(lcaclass, kids05), margin = 1)) %>%
melt(id.vars = "lcaclass")
ggplot(lcaCharData, aes(x = factor(lcaclass), y = value, fill = kids05)) +
geom_bar(stat = "identity") +
xlab("LCA Class") + ylab("%") +
scale_fill_discrete(name = NULL) +
scale_y_continuous(labels = percent) +
ggtitle("Presence of Kids 0-5 by Case Class") +
myTheme
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
?areaPoly
?area
library(UScensus2010)
areaPoly(ilCounties)
CRS(ilCounties)
?readOGR
proj4string(ilCounties)
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
shiny::runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
source('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard/server temp.R', echo=TRUE)
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
round(1.2345, 2)
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
library("plotly")
install.packages("plotly")
library("plotly")
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
?plot_ly
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
?selectInput
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
dt$all <- "All Cases"
save(dt, file = "C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard/dt.Rda")
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
plotGroup <- switch(input$timelineGroup,
"All" = "all",
"Spell Length" = "spellLen",
"Gender" = "gender",
"Presence of Kids 0-5" = "kids05",
"Presence of Kids 6-18" = "kids618",
"LCA Class" = "lcaclass")
plotGroup
subData()$group <- subData()[, get(plotGroup)]
subData()
subData() <- within(subData(), group <- subData()[, get(plotGroup)])
subData()[, get(plotGroup)]
plotData <- subData()[, .(n = .N), by = c("startYear", plotGroup)]
head(plotData())
head(plotData
)
ggplot(plotData, aes(x = startYear, y = n, colour = factor(get(plotGroup)))) +
geom_line() +
xlab("Start Year of Spell") + ylab("Count of Cases") +
scale_x_continuous(breaks = min(plotData$startYear):max(plotData$startYear)) +
scale_y_continuous(labels = comma) + # , limits = c(0, NA)
scale_colour_discrete(name = "") +
ggtitle("# of Case Spells Meeting Selection Criteria") +
myTheme
plotGroup = "kids05"
plotData <- subData()[, .(n = .N), by = c("startYear", plotGroup)]
ggplot(plotData, aes(x = startYear, y = n, colour = factor(get(plotGroup)))) +
geom_line() +
xlab("Start Year of Spell") + ylab("Count of Cases") +
scale_x_continuous(breaks = min(plotData$startYear):max(plotData$startYear)) +
scale_y_continuous(labels = comma) + # , limits = c(0, NA)
scale_colour_discrete(name = "") +
ggtitle("# of Case Spells Meeting Selection Criteria") +
myTheme
runApp('C:/Users/nmader/Google Drive/Chapin Hall/Chapin Hall - DHS for HPL/sdp-dashboard')
source('~/.active-rstudio-document', echo=TRUE)
xmean = matrix(rnorm(8, sd=4), 2)
head(xmean)
source('~/.active-rstudio-document', echo=TRUE)
plot(x, col = whitch, pch=19)
plot(x, col = which, pch=19)
head(x)
colnames(x) <- c("x", "y")
ggplot(x, aes(x, y)) + geom_point()
df <- data.frame(x)
colnames(df) <- c("x", "y")
library(ggplot2)
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) +
geom_point() +
xlab("") + ylab("")
ggplot(df, aes(x, y)) +
geom_point() +
xlab("") + ylab("") +
scale_x_continuous(labels = NULL) +
scale_y_continuous(labels = NULL)
ggsave("unclustered.png", width = 400, height = 400)
base <- ggplot(df, aes(x, y)) +
xlab("") + ylab("") +
scale_x_continuous(labels = NULL) +
scale_y_continuous(labels = NULL)
head(df)
df <- data.frame(x, col = which)
df
colnames(df) <- c("x", "y", "col")
base + geom_point()
ggsave("unclustered.png", width = 4, height = 4)
base + geom_point(aes(colour = factor(col)))
base + geom_point(aes(colour = factor(df$col)))
base + geom_point(aes(colour = factor(df$col))) +
scale_colour_discrete(guides = FALSE)
base + geom_point(aes(colour = factor(df$col))) +
scale_colour_discrete(guide = FALSE)
ggsave("clustered.png", width = 4, height = 4)
getwd()
fp <- read.csv("C:/Users/nmader/Downloads/buildings.csv",
stringsAsFactors = FALSE)
colnames(fp)
View(fp)
dim(fp)
table(fp$BLDG_CONDI)
fp$the_geom[1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dum <- model.matrix(~ -1 + cat + id + x)
dum <- model.matrix(~ -1 + cat + id + x, z)
head(dum)
system.time(max <- aggregate(z, list(z$id)))
system.time(max <- aggregate(z, list(z$id), max))
dtmax <- dt[, lapply(.SD, max), by = id]
dt <- data.table(z)
system.time(dtmax <- dt[, lapply(.SD, max), by = id])
head(dtmax)
head(dt)
head(z)
dt <- data.table(dum)
head(dt)
system.time(dtmax <- dt[, lapply(.SD, max), by = id])
head(dtmax)
n <- 1e5
z <- data.frame(cat = sample(letters[1:6], n, replace = T),
id = 1:n,
x = runif(n))
z <- rbind(z,
z[sample(1:n, n/10),]) # Add duplicates
dum <- model.matrix(~ -1 + cat + id + x, z)
system.time(max <- aggregate(dum, list(dum$id), max))
class(dum)
head(dum)
head(dum$id)
system.time(max <- aggregate(dum, list(z$id), max))
dt <- data.table(dum)
system.time(dtmax <- dt[, lapply(.SD, max), by = id])
dim(dtmax)
dim(max)
head(dtmax)
head(max)
dum2 <- model.matrix(~ -1 + cat + id, z)
dt <- data.table(dum2)
system.time(dtmax <- dt[, lapply(.SD, max), by = id])
dum <- model.matrix(~ -1 + cat, z)
system.time(max <- aggregate(dum, list(z$id), max))
dum2 <- model.matrix(~ -1 + cat + id, z)
dt <- data.table(dum2)
system.time(dtmax <- dt[, lapply(.SD, max), by = id])
dfmxa <- data.table(dtmax)
dfmax <- data.table(dtmax)
identical(dfmax, max)
head(dfmax)
head(max)
colnames(max)[1] <- "id"
identical(max, dfmax)
head(max)
head(dfmax)
dfmax <- data.frame(dtmax)
identical(max, dfmax)
head(max)
head(dfmax)
str(dfmax)
comp <- max - dfmax
summary(comp)
?model.matrix
dum3 <- z %>% model.matrix(~ -1 + cat + id, .)
library(magrittr)
dum3 <- z %>% model.matrix(~ -1 + cat + id, .)
identical(dum3, dum2)
str(z)
lapply(z, class)
classes <- lapply(z, class)
classes
classes <- slapply(z, class)
classes <- sapply(z, class)
classes
names(classes)[classes == "numeric"]
names(classes)[classes == "integer"]
normalizePath("C:/users/nmader")
?pt
pt(1.96)
pt(1.96, 100)
pt(1.64, 100)
pt(1.64, 100, lower.tail=FALSE)
pt(1.96, 100, lower.tail=FALSE)
2*pt(1.96, 100, lower.tail=FALSE)
pnorm(1.96)
1-2*pnorm(1.96)
2*(1-pnorm(1.96, lower.tail = FALSE))
2*(pnorm(1.96, lower.tail = FALSE))
SystemDate()
date()
day(date())
?date
format(Sys.time(), "%a %b %d %H:%M:%S %Y")
format(Sys.time(), "%b %d, %Y")
format(Sys.time(), "%m %d, %Y")
format(Sys.time(), "%M %d, %Y")
?format
format(Sys.time(), "%B %d, %Y")
?adagio
install.packages("adagio")
?adagio
?mknapsack
library(adagio)
?mknapsack
mknapsack
ls()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
try(setwd("~/GitHub/knitr-sandbox/"))
library(knitr)
library(tidyr)
library(dplyr)
library(data.table)
library(magrittr)
load("data-for-cleaning.Rda")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE)
try(setwd("~/GitHub/knitr-sandbox/"))
library(knitr)
library(tidyr)
library(dplyr)
library(data.table)
library(magrittr)
load("data-for-cleaning.Rda")
head(TotsData_2016)
tail(LabData_2016)
str(TotsData_2016)
str(LabData_2016)
dim(TotsData_2016)
dim(LabData_2016)
colnames(TotsData_2016)
colnames(LabData_2016)
summary(TotsData_2016)
summary(LabData_2016)
table(LabData_2016$activity)
table(LabData_2016$activity, LabData_2016$age)
# Margin = 1 refers to rows. Thus, this will return row-wise proportions.
prop.table(table(LabData_2016$activity, LabData_2016$age), margin = 1)
# Margin = 2 refers to columns Thus, this will return row-wise proportions.
my_prop <- prop.table(table(LabData_2016$activity, LabData_2016$age), margin = 2)
round(100*my_prop, digits = 2)
# Margin = 2 refers to columns Thus, this will return row-wise proportions.
my_prop <- prop.table(table(LabData_2016$activity, LabData_2016$age), margin = 1)
sprintf("%1.0f%%", 100*my_prop)
100*my_prop
sapply(my_prop, . %>% sprintf("%1.0f%%", .*100))
sapply(my_prop, function(x) sprintf("%1.0f%%", x*100))
# Margin = 2 refers to columns Thus, this will return row-wise proportions.
my_prop <- prop.table(table(LabData_2016$activity, LabData_2016$age), margin = 1)
sprintf("%1.0f%%", 100*my_prop)
?kable
kable(100*my_prop)
kable(100*my_prop, digits = 2)
do.call("sprintf", c("%1.0f%%", 100*my_prop))
do.call("sprintf", c("%1.0f%%", my_prop))
do.call("sprintf", c("%1.0f%%", 100*data.frame(my_prop)))
sprintf("%1.0f%%", 100*data.frame(my_prop))
df <- data.frame(my_prop)
df
sprintf("%1.0f%%", 100*my_prop)
View(TotsData_2016)
View(LabData_2016)
cn
colnames(TotsData_2014)
colnames(TotsData_2015)
colnames(TotsData_2016)
colnames(LabData_2016)
colnames(LabData_2015)
colnames(LabData_2014)
dfs <- NULL
for (p in c("Tots", "Lab")){
d <- get(paste0("df_", p))
for (y in years){
d_y <- subset(d, year == y)
if (p == "Lab"){
if (y == years[1]) select(d_y, -credits)
if (y == years[2]) d_y$activity <- tolower(d_y$activity)
if (y == years[3]) d_y$activity <- toupper(gsub(" |/", "__", d_y$activity))
}
fname <- paste0(p, "Data_", y)
assign(fname, d_y)
dfs <- c(dfs, fname)
}
}
save(list = dfs, file = "data-for-cleaning.Rda")
dfs <- NULL
for (p in c("Tots", "Lab")){
d <- get(paste0("df_", p))
for (y in years){
d_y <- subset(d, year == y)
if (p == "Lab"){
if (y == years[1]) d_y <- select(d_y, -credits)
if (y == years[2]) d_y$activity <- tolower(d_y$activity)
if (y == years[3]) d_y$activity <- toupper(gsub(" |/", "__", d_y$activity))
}
fname <- paste0(p, "Data_", y)
assign(fname, d_y)
dfs <- c(dfs, fname)
}
}
save(list = dfs, file = "data-for-cleaning.Rda")
source('~/GitHub/knitr-sandbox/gen-data-for-cleaning.R', echo=TRUE)
colnames(LabData_2014)
colnames(LabData_2015)
?select
source('~/GitHub/knitr-sandbox/gen-data-for-cleaning.R', echo=TRUE)
colnames(LabData_2014)
colnames(LabData_2015)
TotsData_2014$year <- 2014
TotsData_2015$year <- 2015
TotsData_2016$year <- 2016
TotsData <- rbind(TotsData_2014, TotsData_2015, TotsData_2016)
TotsData_alt <- NULL
for (y in 2014:2016){
temp <- get(paste0("TotsData_", y))
temp$year <- y
TotsData_alt <- rbind(TotsData_alt, temp)
}
identical(TotsData, TotsData_alt)
dim(TotsData)
dim(TotsData_alt)
head(TotsData)
dim(TotsData_alt_alt)
head(TotsData_alt)
all(TotsData == TotsData_alt)
class(TotsData)
class(TotsData_alt)
identical(TotsData, TotsData_alt)
str(TotsData)
str(TotsData_alt)
LabData_2014$year <- 2014
LabData_2015$year <- 2015
LabData <- rbind(LabData_2014, LabData_2015, LabData_2016)
colnames(LabData_2014)
colnames(LabData_2015)
colnames(LabData_2016)
?rbind
LabData <- rbind.fill(LabData_2014, LabData_2015, LabData_2016)
??rbind.fill
library(plyr)
LabData <- rbind.fill(LabData_2014, LabData_2015, LabData_2016)
head(LabData)
LabData <- rbind.fill(LabData_2014, LabData_2015, LabData_2016)
head(LabData)
tail(LabData)
colnames(LabData)
LabData <- select(LabData, -starts_with("QR"))
colnames(LabData)
colnames(LabData)
LabData <- select(LabData, -starts_with("QR"))
colnames(LabData)
